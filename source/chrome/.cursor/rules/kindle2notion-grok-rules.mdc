---
description:
globs:
alwaysApply: true
---
Instructions for Grok: Kindle2Notion Chrome Extension Development
Grok, your task is to design, develop, and document a Chrome extension called "Kindle To Notion" that enables users to export highlights and notes from their Kindle books (via read.amazon.com or ler.amazon.com.br) into Notion databases or pages. The extension must be secure, user-friendly, optimized, and compliant with Google Chrome Web Store policies. Additionally, you must provide a README.md for the GitHub repository and a Release_Notes.md for every code submission or modification, reflecting the specific changes made. At the end of each interaction, ask the user if they want you to generate these files.

# 1. Project Overview and Features
## Core Functionality:
-Authenticate with Amazon Kindle (session-based, no credential storage).
-Extract highlights/notes from Kindle library (via content scripts on read.amazon.com/notebook).
-Authenticate with Notion API (OAuth, store access tokens in chrome.storage).
-Allow users to select books, highlights, and target Notion pages/databases.
-Format highlights as Notion blocks (e.g., quotes, database entries with metadata: book title, author, location, date).
-Support bulk export, filtering (by book/date), and duplicate prevention.

## Additional Features:
Popup UI for quick sync actions.
Options page for settings (Notion token, sync preferences).
Optional background sync (toggleable, with user consent).
User-friendly error notifications (via chrome.notifications).


Non-Features: No data collection without consent, no ads, no tracking, no unrelated features.

## 2. Compliance with Google Chrome Web Store Policies

Reference developer.chrome.com/webstore/program_policies:
Permissions: Use minimal permissions (e.g., "storage", "identity", "tabs", "activeTab", "https://read.amazon.com/", "https://api.notion.com/"). Justify in code and description.
Privacy: No personal data collection without consent. Provide a privacy policy link in manifest (e.g., hosted on GitHub).
Security: Use HTTPS, avoid eval()/unsafe-inline, sanitize inputs (prevent XSS).
Single Purpose: Focus on Kindle-to-Notion sync only.
Submission Assets: Include description, icons (16x16, 48x48, 128x128), screenshots, promo video.
Use web_search if policy details are unclear.



## 3. Architecture and Code Structure

Manifest Version: Use v3.
File Structure:
manifest.json: Define permissions, background service worker, content scripts, popup, options.
background.js: Handle OAuth, background tasks, message passing.
content.js: Extract Kindle data via DOM parsing (ethical, user-consented).
popup.js/html: Simple sync interface.
options.js/html: Settings interface.
utils.js: Shared utilities (e.g., API wrappers).
lib/: Minified third-party libs (if needed).
README.md: Project documentation.
Release_Notes.md: Changelog for updates.


## Tech Stack: Vanilla JS/ES6+, Fetch API, Notion API (api.notion.com). Avoid heavy frameworks unless necessary.
Data Flow:
User authenticates via popup/options.
Content script extracts Kindle data.
Background script processes and sends to Notion.
Use chrome.runtime.onMessage for communication.



## 4. Best UI/UX Practices
-Design: Follow Material Design or Chrome UI guidelines (developer.chrome.com/docs/extensions/mv3/user_interface). -Ensure WCAG 2.1 compliance (color contrast >4.5:1, keyboard navigation).
-Popup UI: Minimalist (logo, "Connect Accounts", sync button, progress bar, status messages).
-Options Page: Form-based (Notion token input, sync frequency, auto-sync toggle). Include tooltips, responsive design.
### User Flow:
-Onboarding: First-run welcome page with setup steps.
-Feedback: Loading spinners, success/error toasts (plain language).
-Theme: Support dark/light mode (matchMedia).
-i18n: Use chrome.i18n for multi-language (English default).

Testing: Simulate new user, repeat sync, error cases. Aim for <3 clicks to sync.

## 5. Code Optimization and Best Practices
### Performance:
-Minimize bundle size (minify JS/CSS with Terser).
-Batch API calls (e.g., Notion batch creates). Use async/await.
-Limit sync frequency (e.g., max 1/hour without action).

### Code Quality:
-Modular functions, const/let, try/catch everywhere.
-Security: Use CSP (script-src 'self'), sanitize inputs (DOMPurify).
-Tests: Unit tests for key functions (Jest if using code_execution), integration tests for APIs.
-Documentation: JSDoc for functions, commit messages (e.g., "feat: add Notion auth").

Tools: Use code_execution to test snippets, ESLint for linting.

## 6. Documentation Requirements
### README.md:
-Sections: Project Overview, Features, Installation, Usage, Setup (Kindle/Notion auth), Contributing, License (MIT).
-Include screenshots or UI descriptions.
-Host privacy policy link.

### Release_Notes.md:
-Format: Version (e.g., v1.0.0), Date, Changes (Added, Changed, Fixed, Removed).
-Reflect specific changes in the latest code/update.
-Example:# Release Notes

## v1.0.0 - 2025-08-15
- Added: Initial extension with Kindle highlight extraction.
- Added: Notion API integration for importing highlights.
- Fixed: OAuth token storage issue.

Generation: Provide both files in every code-related response. Ask user: "Would you like me to generate the README.md and Release_Notes.md for this update?"

## 7. Development Steps
-Research: Use web_search for Notion API, Kindle highlight extraction (DOM parsing). Confirm policies via browse_page.
-Prototype: Create manifest.json, core scripts. Test locally (chrome://extensions).
-Implement: Auth, extraction, import, UI.
-Optimize/Test: Profile with DevTools. Test edge cases (no highlights, API limits).
-Document: Generate README.md, Release_Notes.md per update.
-Use the attached files of the project as a reference of the last working version of the extension.
-Enables persistence to keep the last working version of code, avoiding errors/bugs as new functions are implemented.
-Use the attached 'Kindle complete example webpage.html' file as a refence file for kindle highlights pages.
-Output:
Code files in full.
README.md and Release_Notes.md.
Deployment guide.
Prompt user for documentation generation.

## 8. Output Format
Content types: text/markdown for README/Release Notes.